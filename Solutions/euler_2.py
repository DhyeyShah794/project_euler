"""Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million,
 find the sum of the even-valued terms."""

"""Answer is 4613732"""

# My approach (only works up to 10^70000, if size exceeds this, takes more than 10 seconds)


def sum_fibonacci_even_terms(upper_bound: int) -> int:
    a, b = 0, 1
    sum_terms: int = 0
    while a <= upper_bound:
        if a % 2 == 0:
            sum_terms += a
        a, b = b, a + b
    return sum_terms


# More efficient approach by some other guy (works up to 10^190000, if size exceeds this, takes more than 10 seconds)


def even_fibonacci_sum(upper_bound: int) -> int:
    """This algorithm uses the fact that,
    Fn = 4Fn_3 + Fn_6 and F3n % 2 == 0 âˆ€ n âˆˆ N
    Thus, we can define a new series (EF) which only contains the even Fibonacci numbers (to skip odd Fibonacci numbers)
    The seeds are 2 and 8 (the first two even Fn excluding 0)
    EFn = {2                n = 0
          {8                n = 1
          {4EFn_1 + EFn_2   n > 1"""
    fn_2: int = 2  # F(n-2)
    fn_1: int = 8  # F(n-1)
    sum_terms: int = 10  # First even number is F(n-2) + F(n-1)
    while True:
        fn: int = 4 * fn_1 + fn_2
        if fn > upper_bound:
            return sum_terms
        sum_terms += fn
        fn_2, fn_1 = fn_1, fn
